@page "/test-db"
@inject IDbContextFactory<PageDbContext> PageDbContextFactory
@inject IDbContextFactory<ProductDbContext> ProductDbContextFactory
@inject IDbContextFactory<ImageDbContext> ImageDbContextFactory
@inject IDbContextFactory<OrderDbContext> OrderDbContextFactory
@inject IDbContextFactory<EmailDbContext> EmailDbContextFactory

<h3>Database Testing Page</h3>

<button @onclick="ClearPageDbContext">Clear Page Database</button>
<button @onclick="ClearProductDbContext">Clear Product Database</button>
<button @onclick="ClearImageDbContext">Clear Image Database</button>
<button @onclick="ClearOrderDbContext">Clear Order Database</button>
<button @onclick="ClearEmailDbContext">Clear Email Database</button>

<p>@statusMessage</p>

@code {
    private string statusMessage = "Waiting for action...";

    private async Task ClearPageDbContext()
    {
        await ClearDatabase(PageDbContextFactory, context => context.Set<PageContent>());
        statusMessage = "Page database cleared.";
    }

    private async Task ClearProductDbContext()
    {
        await ClearDatabase(ProductDbContextFactory, context => context.Set<Product>());
        statusMessage = "Product database cleared.";
    }

    private async Task ClearImageDbContext()
    {
        await ClearDatabase(ImageDbContextFactory, context => context.Set<PageImage>());
        statusMessage = "Image database cleared.";
    }

    private async Task ClearOrderDbContext()
    {
        await ClearDatabase(OrderDbContextFactory, context => context.Set<Order>());
        statusMessage = "Order database cleared.";
    }

    private async Task ClearEmailDbContext()
    {
        await ClearDatabase(EmailDbContextFactory, context => context.Set<EmailTemplate>());
        statusMessage = "Email database cleared.";
    }

    private async Task ClearDatabase<TContext, TEntity>(IDbContextFactory<TContext> dbContextFactory, Func<TContext, DbSet<TEntity>> getDbSet)
        where TContext : DbContext
        where TEntity : class
    {
        try
        {
            using var context = dbContextFactory.CreateDbContext();
            var dbSet = getDbSet(context);

            if (dbSet != null)
            {
                context.RemoveRange(dbSet);
                await context.SaveChangesAsync();
            }
            else
            {
                statusMessage = $"Error: Table not found in {typeof(TContext).Name}.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error clearing database: {ex.Message}";
        }

        StateHasChanged(); // Ensure UI updates
    }
}
