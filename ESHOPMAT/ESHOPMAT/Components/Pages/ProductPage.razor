@page "/product/{ProductId:int}"
@inject IDbContextFactory<ProductDbContext> DbProductContextFactory
@inject IDbContextFactory<PageDbContext> DbPageContextFactory
@using ESHOPMAT.Models
@using Microsoft.AspNetCore.Components

@if (RootPageContent == null)
{
    <p>Loading...</p> <!-- This is your simple loading page -->
}
else
{
    <DynamicComponentRendering Page="RootPageContent" IsEditing="false"></DynamicComponentRendering>
}

@code {

    [Parameter]
    public int ProductId { get; set; }

    private Product? Product { get; set; }
    private PageContent? RootPageContent { get; set; }

    // This method will run each time parameters are set or updated (such as ProductId changing)
    protected override async Task OnParametersSetAsync()
    {
        using var productContext = await DbProductContextFactory.CreateDbContextAsync();
        Product = await productContext.Products.FindAsync(ProductId);

        if (Product == null)
        {
            // Handle product not found
            RootPageContent = null;
            return;
        }

        using var pageContext = await DbPageContextFactory.CreateDbContextAsync();
        RootPageContent = await GeneratePageTemplate(Product.Type, pageContext);

        if (RootPageContent != null)
        {
            RootPageContent.SetProductData(Product);
        }
    }

    private async Task<PageContent> GeneratePageTemplate(ProductType productType, PageDbContext context)
    {
        var templateName = $"{productType}Template";
        PageContentDictionaryCache.Initialize(context);
        var allPages = context.Pages.ToList();
        var existingTemplate = allPages.Where(p => p.Name == templateName).FirstOrDefault();

        if (existingTemplate != null)
        {
            return existingTemplate;
        }

        var newTemplate = CreateDefaultPageTemplate(templateName, context);
        await context.Pages.AddAsync(newTemplate);
        await context.SaveChangesAsync();

        return newTemplate;
    }

    private PageContent CreateDefaultPageTemplate(string templateName, PageDbContext context)
    {
        var page = new PageContent(new PageSettings
            {
                Name = templateName,
                Type = ComponentType.Container,
                RowCount = 16,
                ColCount = 16,
                IsRoot = true
            }, context);

        page.AddChild(new PageSettings
            {
                Name = "TitleDescription",
                Type = ComponentType.ProductTitleDescription,
                Row = 1,
                Col = 1,
                RowSpan = 4,
                ColSpan = 4
            });

        page.AddChild(new PageSettings
            {
                Name = "ProductImage",
                Type = ComponentType.ProductImage,
                Row = 1,
                Col = 5,
                RowSpan = 4,
                ColSpan = 4
            });

        page.AddChild(new PageSettings
            {
                Name = "OrderingBar",
                Type = ComponentType.OrderingBar,
                Row = 5,
                Col = 1,
                RowSpan = 2,
                ColSpan = 8
            });

        return page;
    }
}
