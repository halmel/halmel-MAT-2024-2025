@page "/page-editor"
@inject ESHOPMAT.Data.PageDbContext DbContext

@if (Pages.Count == 0)
{
    <p>No pages available. Please add a new page or edit the default page.</p>
}
else
{
    <DynamicComponentRendering Page="Root" />

    <div style="margin-top: 20px;">
        <button @onclick="SavePageContent">Save</button>
        <button @onclick="LoadPreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
        <button @onclick="LoadNextPage" disabled="@(!HasNextPage)">Next</button>
    </div>
}

@code {
    private List<ESHOPMAT.Models.PageSettings> Pages = new();
    private int CurrentPageIndex = 0;

    private ESHOPMAT.Models.PageContent Root { get; set; }

    private bool HasPreviousPage => CurrentPageIndex > 0;
    private bool HasNextPage => CurrentPageIndex < Pages.Count - 1;

    protected override async Task OnInitializedAsync()
    {
        // Load all pages from the database
        Pages = await DbContext.Pages
            .Select(p => new ESHOPMAT.Models.PageSettings
                {
                    Name = p.Name,
                    Type = p.Type,
                    RowCount = int.Parse(p.Data.GetValueOrDefault(p.Name + ":rows") ?? "1"),
                    ColCount = int.Parse(p.Data.GetValueOrDefault(p.Name + ":columns") ?? "1"),
                    Row = int.Parse(p.Data.GetValueOrDefault(p.Name + ":row") ?? "1"),
                    Col = int.Parse(p.Data.GetValueOrDefault(p.Name + ":col") ?? "1"),
                    RowSpan = int.Parse(p.Data.GetValueOrDefault(p.Name + ":rowspan") ?? "1"),
                    ColSpan = int.Parse(p.Data.GetValueOrDefault(p.Name + ":colspan") ?? "1"),
                    Count = int.Parse(p.Data.GetValueOrDefault(p.Name + ":count") ?? "1")
                })
            .ToListAsync();

        // Initialize a default page if none exist
        if (Pages.Count == 0)
        {
            InitializeDefaultPage();
        }

        LoadCurrentPage();
    }

    private void InitializeDefaultPage()
    {
        var defaultPage = new ESHOPMAT.Models.PageSettings
            {
                Name = "Root",
                Type = "Container",
                RowCount = 4,
                ColCount = 4
            };

        Pages.Add(defaultPage);
    }

    private void LoadCurrentPage()
    {
        var currentPageSettings = Pages[CurrentPageIndex];
        Root = new ESHOPMAT.Models.PageContent(currentPageSettings);

        // Add child components to the Root dynamically if needed
        var counterSettings = new ESHOPMAT.Models.PageSettings
            {
                Name = "Counter1",
                Type = "Counter",
                Row = 1,
                Col = 1,
                RowSpan = 1,
                ColSpan = 1
            };

        Root.AddChild(counterSettings);
    }

    private async Task SavePageContent()
    {
        if (Pages.Count == 0) return;

        var currentPageSettings = Pages[CurrentPageIndex];

        // Check if the page exists in the database
        var existingPage = await DbContext.Pages.FirstOrDefaultAsync(p => p.Name == currentPageSettings.Name);

        if (existingPage != null)
        {
            // Update the existing page
            existingPage.Data = Root.Data; // Update with new data
            DbContext.Pages.Update(existingPage);
        }
        else
        {
            // Create a new page
            var newPage = new ESHOPMAT.Models.PageContent(currentPageSettings);
            await DbContext.Pages.AddAsync(newPage);
        }

        await DbContext.SaveChangesAsync();
    }

    private void LoadPreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPageIndex--;
            LoadCurrentPage();
        }
    }

    private void LoadNextPage()
    {
        if (HasNextPage)
        {
            CurrentPageIndex++;
            LoadCurrentPage();
        }
    }
}
