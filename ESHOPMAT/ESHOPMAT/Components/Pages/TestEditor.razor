@page "/page-editor"
@inject ESHOPMAT.Models.PageDbContext DbContext
@inject IDbContextFactory<ProductDbContext> DbProductContextFactory
@inject NavigationManager Navigation
@using Shared.Modals
@if (Pages.Count == 0)
{
    <p>No pages available. Please add a new page or edit the default page.</p>
}
else
{
    <h3>Editing Page: @Root.Name</h3>
    <DynamicComponentRendering Page="Root" IsEditing="true"></DynamicComponentRendering>

    <h4>Main Component Data</h4>
    <button class="btn btn-info" @onclick="ToggleDataList">Show/Hide Data</button>

    @if (IsDataListVisible)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Key</th>
                    <th>Value</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var dataItem in Root.Data.ToList())
                {
                    <tr>
                        <td>@dataItem.Key</td>
                        <td>
                            <input type="text" value="@dataItem.Value" @oninput="(e) => UpdateDataValue(Root, dataItem.Key, e.Value?.ToString())" />
                        </td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => DeleteDataEntry(dataItem.Key)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <h4>Child Components</h4>
    @if (Root.Children.Count > 0)
    {
        <ul>
            @foreach (var child in Root.Children)
            {
                <li>
                    <strong>@child.Name (@child.Type)</strong>
                    <button class="btn btn-warning" @onclick="() => EditChild(child)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteChild(child)">Delete</button>
                    @if (child.Children.Count > 0)
                    {
                        <ul>
                            @foreach (var grandchild in child.Children)
                            {
                                <li>@grandchild.Name (@grandchild.Type)</li>
                            }
                        </ul>
                    }
                </li>
            }
        </ul>
    }
    else
    {
        <p>No child components.</p>
    }

    <button class="btn btn-primary" @onclick="ShowAddChildModal">Add Child</button>
    <AddChildModal IsVisible="IsAddingChild" OnClose="HandleCloseAddModal" OnAdd="HandleAddChild" />

    <div style="margin-top: 20px;">
        <button class="btn btn-danger" @onclick="DeletePage">Delete Page</button>
        <button class="btn btn-secondary" @onclick="LoadPreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
        <button class="btn btn-secondary" @onclick="LoadNextPage" disabled="@(!HasNextPage)">Next</button>
        <button class="btn btn-secondary" @onclick="SavePageContent">Save</button>
        <button class="btn btn-secondary" @onclick="PushToProd">PushToProd</button>
    </div>

    <ProductSelector OnProductSelected="HandleProductSelection" DefaultProductId="@(Root.Data.ContainsKey("Product:Id") ? int.Parse(Root.Data["Product:Id"]) : 0)" />


    @if (!IsEditingRoot)
    {
        <button class="btn btn-dark" @onclick="BackToRoot">Go Back</button>
    }
}

@code {















    private bool IsDataListVisible = false;

    private void ToggleDataList()
    {
        IsDataListVisible = !IsDataListVisible;
    }


    private void HandleProductSelection(Product selectedProduct)
    {
        Root.SetProductData(selectedProduct);
    }
























    private bool IsEditingRoot = true;
    private PageContent EditingChild { get; set; }
    private int StorePageIndex = 0;

    private List<ESHOPMAT.Models.PageContent> Pages = new();
    private int CurrentPageIndex = 0;
    private bool IsAddingChild = false; // Flag for showing the Add Child modal

    private ESHOPMAT.Models.PageContent Root => Pages.Count > 0 ? Pages[CurrentPageIndex].DevPage : CreateDefaultPage();
    private bool HasPreviousPage => CurrentPageIndex > 0;
    private bool HasNextPage => CurrentPageIndex < Pages.Count - 1;

    protected override async Task OnInitializedAsync()
    {
        PageContentDictionaryCache.Initialize(DbContext);
        Pages = await FetchRootPages();  // Await the asynchronous call to fetch pages

        if (Pages.Count == 0)
        {
            var defaultPage = CreateDefaultPage();
            Pages.Add(defaultPage);
            await DbContext.Pages.AddAsync(defaultPage);
            await DbContext.SaveChangesAsync();
        }
    }

    private async Task<List<PageContent>> FetchRootPages()  // Return Task<List<PageContent>> instead of List<PageContent>
    {
        // For example, assume `PageContentService.GetAllPages()` fetches all pages asynchronously
        var allPages = await DbContext.Pages.ToListAsync();  // Asynchronously fetch all pages from the database
        return allPages.Where(page => page.IsRoot == true && page.IsDev == false).ToList();
    }

    private ESHOPMAT.Models.PageContent CreateDefaultPage()
    {
        var defaultPage = new PageContent(new PageSettings
            {
                Name = "DefaultPage",
                Type = ComponentType.Container,
                RowCount = 16,
                ColCount = 16,
                IsRoot = true
            }, DbContext);

        var nestedContainer = new PageSettings
            {
                Name = "NestedContainer",
                Type = ComponentType.Container,
                RowCount = 2,
                ColCount = 2,
                Row = 2,
                Col = 2,
                RowSpan = 2,
                ColSpan = 2
            };

        defaultPage.AddChild(nestedContainer);
        return defaultPage;
    }

    private async Task SavePageContent()
    {
        if (Pages.Count == 0) return;

        var currentPage = Pages[CurrentPageIndex];
        var existingPage = await DbContext.Pages.FirstOrDefaultAsync(p => p.Name == currentPage.Name);

        if (existingPage != null)
        {
            DbContext.Entry(existingPage).State = EntityState.Detached; // Detach to avoid conflicts
            DbContext.Pages.Update(currentPage);

        }
        else
        {
            if (currentPage.IsDev == true)
            {
                throw new InvalidOperationException("Cant save dev page like this");
            }
            await DbContext.Pages.AddAsync(currentPage);
        }

        await DbContext.SaveChangesAsync();
        PageContentDictionaryCache.Update(currentPage.SharedId, currentPage.Data, DbContext);
        PageContentDictionaryCache.Update(currentPage.DevSharedId, currentPage.DevPage.Data, DbContext);
    }

    private async Task DeletePage()
    {
        if (Pages.Count == 0) return;

        var currentPage = Pages[CurrentPageIndex];
        var existingPage = await DbContext.Pages.FirstOrDefaultAsync(p => p.Name == currentPage.Name);

        if (existingPage != null)
        {
            await DbContext.DeletePageAsync(existingPage.Id);
            await DbContext.SaveChangesAsync();
        }

        Pages.RemoveAt(CurrentPageIndex);

        if (CurrentPageIndex >= Pages.Count && Pages.Count > 0)
        {
            CurrentPageIndex = Pages.Count - 1;
        }
    }

    private void LoadPreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPageIndex--;
        }
    }

    private void LoadNextPage()
    {
        if (HasNextPage)
        {
            CurrentPageIndex++;
        }
    }

    private void ShowAddChildModal()
    {
        IsAddingChild = true; // Show the Add Child modal
    }

    private void HandleCloseAddModal(bool isVisible)
    {
        IsAddingChild = isVisible; // Hide the modal
    }

    private async void HandleAddChild(PageSettings newChildSettings)
    {
        if (newChildSettings.IsRoot == true)
        {
            await AddRoot(newChildSettings);
        }else
        {
            // Add the new child component to the current root
            Root.AddChild(newChildSettings);

        }
    }
    private async Task AddRoot(PageSettings x)
    {
        var defaultPage = new PageContent(x, DbContext);
        Pages.Add(defaultPage);
        await DbContext.Pages.AddAsync(defaultPage);
        await DbContext.SaveChangesAsync();
    }

    // Handle the logic for editing a child component
    private void EditChild(PageContent child)
    {
        StorePageIndex = CurrentPageIndex;

        Pages.Add(child);
        CurrentPageIndex = Pages.Count - 1;
        IsEditingRoot = false; 
    }
    private void BackToRoot()
    {
        IsEditingRoot = true;
        Pages.Remove(Root);
        CurrentPageIndex = StorePageIndex;
    }

    private void PushToProd(){
        Pages[CurrentPageIndex].PushDevVersion();
    }

    // Method to update data values for the page or child component
    private void UpdateDataValue(PageContent page, string key, string value)
    {
        page.SetValue(GetStringAfterColon(key), value, GetStringBeforeColon(key));
    }
    static string GetStringBeforeColon(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return string.Empty;
        }

        // Find the index of the colon
        int colonIndex = input.IndexOf(':');

        // If a colon is found, return the substring before it
        if (colonIndex >= 0)
        {
            return input.Substring(0, colonIndex);
        }

        // If no colon is found, return the entire string
        return input;
    }
    static string GetStringAfterColon(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return string.Empty;
        }

        // Find the index of the colon
        int colonIndex = input.IndexOf(':');

        // If a colon is found, return the substring after it
        if (colonIndex >= 0 && colonIndex < input.Length - 1)
        {
            return input.Substring(colonIndex + 1); // Return everything after the colon
        }

        // If no colon is found, return an empty string
        return string.Empty;
    }
    private async void DeleteChild(PageContent child)
    {
        try
        {
            // Ensure the child entity is loaded and tracked by the DbContext
            var trackedChild = await DbContext.Pages.FindAsync(child.Id);
            if (trackedChild != null)
            {
                // Remove the child entity from the database
                DbContext.Pages.Remove(trackedChild);
                await DbContext.SaveChangesAsync();

                // Recursively delete related data
                DeleteChildDataRecursively(trackedChild);

                // Reinitialize component state
                await OnInitializedAsync();
            }
            else
            {
                Console.WriteLine("Child entity not found for deletion.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting child: {ex.Message}");
        }
    }

    private void DeleteChildDataRecursively(PageContent child)
    {
        // Remove any entries in the Data dictionary that belong to this child
        var keysToRemove = Root.Data.Keys.Where(key => key.StartsWith(child.Name + ":")).ToList();

        foreach (var key in keysToRemove)
        {
            Root.Data.Remove(key);
        }

        // Recursively do the same for all child components of the current child
        foreach (var grandchild in child.Children)
        {
            DeleteChildDataRecursively(grandchild);
        }
    }

    private void DeleteDataEntry(string key)
    {
        if (Root.Data.ContainsKey(key))
        {
            Root.Data.Remove(key);
        }
    }


}
