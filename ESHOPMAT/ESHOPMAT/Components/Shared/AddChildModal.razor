@code {
    [Parameter] public bool IsVisible { get; set; } // Controls visibility of the modal
    [Parameter] public EventCallback<bool> OnClose { get; set; } // Trigger to close the modal
    [Parameter] public EventCallback<PageSettings> OnAdd { get; set; } // Trigger when a child is added

    // Instance of PageSettings for dynamic binding
    private PageSettings newChildSettings = new PageSettings();

    // Method to handle Add Child button click
    private async Task AddChildComponent()
    {
        if (string.IsNullOrEmpty(newChildSettings.Name))
        {
            // Show some validation message if the name is empty (optional)
            return;
        }

        // Emit the OnAdd event, passing the new child settings
        await OnAdd.InvokeAsync(newChildSettings);

        // Close the modal
        await OnClose.InvokeAsync(false);
    }

    // Method to handle Cancel button click
    private async Task Cancel()
    {
        await OnClose.InvokeAsync(false);
    }

    // Function to get the properties of PageSettings dynamically
    private IEnumerable<System.Reflection.PropertyInfo> GetProperties()
    {
        return typeof(PageSettings).GetProperties();
    }

    // Helper method to set the value dynamically
    private void SetPropertyValue(string propertyName, object value)
    {
        var property = typeof(PageSettings).GetProperty(propertyName);
        if (property != null && property.CanWrite)
        {
            property.SetValue(newChildSettings, Convert.ChangeType(value, property.PropertyType));
        }
    }

    // Helper method to get the value dynamically
    private object GetPropertyValue(string propertyName)
    {
        var property = typeof(PageSettings).GetProperty(propertyName);
        return property?.GetValue(newChildSettings);
    }

    // Handle boolean value changes manually for checkboxes
    private void OnBooleanValueChanged(string propertyName, bool value)
    {
        SetPropertyValue(propertyName, value);
    }
}

@if (IsVisible)
{
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Child Component</h5>
                    <button type="button" class="btn-close" @onclick="Cancel" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Loop over each property of PageSettings and generate input fields -->
@foreach (var property in GetProperties())
{
    <div class="form-group">
        <label for="@property.Name">@property.Name</label>
        @if (property.PropertyType == typeof(string))
        {
            <input id="@property.Name" class="form-control"
                   value="@GetPropertyValue(property.Name)"
                   @oninput="(e) => SetPropertyValue(property.Name, e.Value.ToString())" />
        }
        else if (property.PropertyType == typeof(int))
        {
            <input id="@property.Name" type="number" class="form-control"
                   value="@GetPropertyValue(property.Name)"
                   @oninput="(e) => SetPropertyValue(property.Name, int.Parse(e.Value.ToString()))" />
        }
        else if (property.PropertyType == typeof(bool))
        {
            <input id="@property.Name" type="checkbox" class="form-check-input"
                   checked="@((bool)GetPropertyValue(property.Name))"
                   @onchange="(e) => OnBooleanValueChanged(property.Name, (bool)e.Value)" />
        }
        else if (property.PropertyType.IsEnum) 
        {
            <!-- Render a dropdown for enums -->
            <select id="@property.Name" class="form-select"
                    @onchange="(e) => SetPropertyValue(property.Name, Enum.Parse(property.PropertyType, e.Value.ToString()))">
                @foreach (var value in Enum.GetValues(property.PropertyType))
                {
                    <option value="@value" selected="@value.Equals(GetPropertyValue(property.Name))">
                        @value
                    </option>
                }
            </select>
        }
        <!-- Add more input types based on property type if needed -->
    </div>
}

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="AddChildComponent">Add</button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}
