<div class="image-container">
    @if (IsEditing)
    {
        <label for="fileUpload" class="upload-label">Drag and drop or click to upload an image</label>
        <InputFile OnChange="OnImageSelected" id="fileUpload" class="file-input" />

        @if (!string.IsNullOrEmpty(CurrentImageBase64))
        {
            <div class="slideshow-container">
                <img src="@CurrentImageBase64" alt="Product Image" class="display-image" />
                <button class="prev-button" @onclick="ShowPreviousImage">&#10094;</button>
                <button class="next-button" @onclick="ShowNextImage">&#10095;</button>
            </div>
        }
        else
        {
            <p>No image available</p>
        }
    }
    else
    {
        @if (!string.IsNullOrEmpty(CurrentImageBase64))
        {
            <div class="slideshow-container">
                <img src="@CurrentImageBase64" alt="Product Image" class="display-image" />
                <button class="prev-button" @onclick="ShowPreviousImage">&#10094;</button>
                <button class="next-button" @onclick="ShowNextImage">&#10095;</button>
            </div>
        }
        else
        {
            <p>No image available</p>
        }
    }
</div>

@code {
    [Inject]
    private IDbContextFactory<ImageDbContext> DbImageContextFactory { get; set; }

    [Parameter]
    public PageContent Page { get; set; }

    [Parameter]
    public bool IsEditing { get; set; }

    private List<string> ImageIds { get; set; }
    private string CurrentImageBase64 { get; set; }
    private int CurrentImageIndex { get; set; } = 0;

    protected override async Task OnParametersSetAsync()
    {
        // Ensure the images are updated when the Page data changes
        var imageIdsStr = Page.Data["Product:Image"];
        ImageIds = imageIdsStr.Split(',').ToList();
        await LoadImageFromDatabase();
    }

    private async Task LoadImageFromDatabase()
    {
        try
        {
            if (ImageIds != null && ImageIds.Count > 0 && CurrentImageIndex >= 0 && CurrentImageIndex < ImageIds.Count)
            {
                var currentImageId = ImageIds[CurrentImageIndex];
                using var dbContext = await DbImageContextFactory.CreateDbContextAsync();
                var image = await dbContext.Images.FindAsync(Convert.ToInt32(currentImageId));
                if (image != null && image.Data != null)
                {
                    CurrentImageBase64 = $"data:image/jpeg;base64,{Convert.ToBase64String(image.Data)}";
                }
                else
                {
                    CurrentImageBase64 = string.Empty;  // Clear image if no image found
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading image: {ex.Message}");
        }
    }

    private async Task ShowNextImage()
    {
        if (ImageIds != null && ImageIds.Count > 0)
        {
            CurrentImageIndex = (CurrentImageIndex + 1) % ImageIds.Count;  // Loop back to first image
            await LoadImageFromDatabase();
        }
    }

    private async Task ShowPreviousImage()
    {
        if (ImageIds != null && ImageIds.Count > 0)
        {
            CurrentImageIndex = (CurrentImageIndex - 1 + ImageIds.Count) % ImageIds.Count;  // Loop back to last image
            await LoadImageFromDatabase();
        }
    }

    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            var imageData = new byte[file.Size];
            await stream.ReadAsync(imageData);
            var imageId = await SaveImageToDatabase(file.Name, imageData);
            ImageIds.Add(imageId);  // Add new image to the list
            Page.SetValue("Product:Image", string.Join(",", ImageIds));  // Update Page data
            CurrentImageIndex = ImageIds.Count - 1;  // Show the newly added image
            CurrentImageBase64 = $"data:image/jpeg;base64,{Convert.ToBase64String(imageData)}";
        }
    }

    private async Task<string> SaveImageToDatabase(string fileName, byte[] imageData)
    {
        try
        {
            using var dbContext = await DbImageContextFactory.CreateDbContextAsync();
            var imageEntry = new PageImage { FileName = fileName, Data = imageData };
            dbContext.Images.Add(imageEntry);
            await dbContext.SaveChangesAsync();
            return $"{imageEntry.Id}";
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving image: {ex.Message}");
            return string.Empty;
        }
    }
}

<style>
    .image-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        border: 1px dashed #ccc;
        padding: 20px;
        width: 300px;
        height: 300px;
    }

    .upload-label {
        cursor: pointer;
        color: #007bff;
        margin-bottom: 10px;
    }

    .file-input {
        display: none;
    }

    .display-image {
        max-width: 100%;
        max-height: 100%;
    }

    .slideshow-container {
        position: relative;
        width: 100%;
        height: 100%;
    }

    .prev-button, .next-button {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background-color: rgba(0,0,0,0.5);
        color: white;
        border: none;
        padding: 10px;
        cursor: pointer;
    }

    .prev-button {
        left: 0;
    }

    .next-button {
        right: 0;
    }
</style>
