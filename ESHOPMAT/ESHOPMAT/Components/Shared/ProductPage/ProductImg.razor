<div class="image-container">
    @if (IsEditing)
    {
        <label for="fileUpload" class="upload-label">Drag and drop or click to upload an image</label>
        <InputFile OnChange="OnImageSelected" id="fileUpload" class="file-input" />

        @if (!string.IsNullOrEmpty(ImageBase64))
        {
            <img src="@ImageBase64" alt="Product Image" class="display-image" />
        }
        else
        {
            <p>No image available</p>
        }
    }
    else
    {
        @if (!string.IsNullOrEmpty(ImageBase64))
        {
            <img src="@ImageBase64" alt="Product Image" class="display-image" />
        }
        else
        {
            <p>No image available</p>
        }
    }
</div>

@code {
    [Inject]
    private IDbContextFactory<ImageDbContext> DbImageContextFactory { get; set; }

    [Parameter]
    public PageContent Page { get; set; }

    [Parameter]
    public bool IsEditing { get; set; }

    private string ImageBase64 { get; set; }
    private string ImageId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var x = Page.Data;
        ImageId = Page.Data["Product:Image"];
        await LoadImageFromDatabase();
    }

    private async Task LoadImageFromDatabase()
    {
        try
        {
            using var dbContext = DbImageContextFactory.CreateDbContext();
            var image = await dbContext.Images.FindAsync(Convert.ToInt32(ImageId));
            if (image != null && image.Data != null)
            {
                ImageBase64 = $"data:image/jpeg;base64,{Convert.ToBase64String(image.Data)}";
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading image: {ex.Message}");
        }
    }

    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            var imageData = new byte[file.Size];
            await stream.ReadAsync(imageData);
            var imageId = await SaveImageToDatabase(file.Name, imageData);
            Page.SetValue("Product:Image", imageId.ToString());
            ImageBase64 = $"data:image/jpeg;base64,{Convert.ToBase64String(imageData)}";
        }
    }

    private async Task<string> SaveImageToDatabase(string fileName, byte[] imageData)
    {
        try
        {
            using var dbContext = DbImageContextFactory.CreateDbContext();
            var imageEntry = new PageImage { FileName = fileName, Data = imageData };
            dbContext.Images.Add(imageEntry);
            await dbContext.SaveChangesAsync();
            return $"{imageEntry.Id}";
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving image: {ex.Message}");
            return string.Empty;
        }
    }
}

<style>
    .image-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        border: 1px dashed #ccc;
        padding: 20px;
        width: 300px;
        height: 300px;
    }

    .upload-label {
        cursor: pointer;
        color: #007bff;
        margin-bottom: 10px;
    }

    .file-input {
        display: none;
    }

    .display-image {
        max-width: 100%;
        max-height: 100%;
    }
</style>
