@code {
    [Parameter]
    public string ImageUrl { get; set; }

    [Inject]
    private IDbContextFactory<ImageDbContext> DbImageContextFactory { get; set; }

    private string ImageBase64 { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadImageFromDatabase();
    }

    private async Task LoadImageFromDatabase()
    {
        try
        {
            // Create a new DbContext instance using the factory
            await using var dbContext = DbImageContextFactory.CreateDbContext();

            // Fetch the image data from the database
            if (int.TryParse(ImageUrl, out int imageId))
            {
                var image = await dbContext.Images.FindAsync(imageId);
                if (image != null && image.Data != null)
                {
                    // Convert the byte array to a Base64 string
                    ImageBase64 = $"data:image/jpeg;base64,{Convert.ToBase64String(image.Data)}";
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading image: {ex.Message}");
        }
    }
}

<div class="image-container">
    @if (!string.IsNullOrEmpty(ImageBase64))
    {
        <img src="@ImageBase64" alt="Product Image" class="display-image" />
    }
    else
    {
        <p>No image available</p>
    }
</div>

<style>
    .image-container {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 10px;
        background-color: #f9f9f9;
        width: 300px;
        height: 300px;
        overflow: hidden;
        border-radius: 8px;
    }

    .display-image {
        max-width: 100%;
        max-height: 100%;
        object-fit: cover;
    }
</style>
