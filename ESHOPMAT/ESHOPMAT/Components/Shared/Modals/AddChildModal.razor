@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public EventCallback<PageSettings> OnAdd { get; set; }

    private PageSettings newChildSettings = new PageSettings { Type = ComponentType.Unknown };
    private Dictionary<string, object> filteredProperties = new Dictionary<string, object>();

    private async Task AddChildComponent()
    {
        if (string.IsNullOrEmpty(newChildSettings.Name))
        {
            return; // Prevent adding without a name
        }

        await OnAdd.InvokeAsync(newChildSettings);
        await OnClose.InvokeAsync(false);
    }

    private async Task Cancel()
    {
        await OnClose.InvokeAsync(false);
    }

    private void OnTypeChanged(ChangeEventArgs e)
    {
        if (e.Value != null && Enum.TryParse<ComponentType>(e.Value.ToString(), out var selectedType))
        {
            newChildSettings.Type = selectedType;
            filteredProperties = newChildSettings.GetFilteredProperties(); // Update fields dynamically
        }
    }

    private void SetPropertyValue(string propertyName, object value)
    {
        var property = typeof(PageSettings).GetProperty(propertyName);
        if (property != null && property.CanWrite)
        {
            property.SetValue(newChildSettings, Convert.ChangeType(value, property.PropertyType));
        }
    }

    private object GetPropertyValue(string propertyName)
    {
        var property = typeof(PageSettings).GetProperty(propertyName);
        return property?.GetValue(newChildSettings);
    }

    private void OnBooleanValueChanged(string propertyName, ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value?.ToString(), out bool boolValue))
        {
            SetPropertyValue(propertyName, boolValue);
        }
    }
}

@if (IsVisible)
{
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Child Component</h5>
                    <button type="button" class="btn-close" @onclick="Cancel" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Name Field -->
                    <div class="form-group">
                        <label for="name">Name</label>
                        <input id="name" class="form-control"
                               value="@newChildSettings.Name"
                               @oninput="(e) => newChildSettings.Name = e.Value?.ToString()" />
                    </div>

                    <!-- Type Dropdown -->
                    <div class="form-group">
                        <label for="type">Type</label>
                        <select id="type" class="form-select" @onchange="OnTypeChanged">
                            @foreach (var value in Enum.GetValues(typeof(ComponentType)))
                            {
                                <option value="@value" selected="@(value.Equals(newChildSettings.Type) ? "selected" : null)">@value</option>
                            }
                        </select>
                    </div>

                    <!-- Dynamically Render Filtered Fields -->
                    @if (newChildSettings.Type != ComponentType.Unknown)
                    {
                        @foreach (var property in filteredProperties)
                        {
                            <div class="form-group">
                                <label for="@property.Key">@property.Key</label>
                                @if (property.Value is int)
                                {
                                    <input id="@property.Key" type="number" class="form-control"
                                           value="@GetPropertyValue(property.Key)"
                                           @oninput="(e) => { if (int.TryParse(e.Value?.ToString(), out int result)) SetPropertyValue(property.Key, result); }" />
                                }
                                else if (property.Value is bool)
                                {
                                    <input id="@property.Key" type="checkbox" class="form-check-input"
                                           checked="@(Convert.ToBoolean(property.Value))"
                                           @onchange="(e) => OnBooleanValueChanged(property.Key, e)" />
                                }
                                else
                                {
                                    <input id="@property.Key" class="form-control"
                                           value="@GetPropertyValue(property.Key)"
                                           @oninput="(e) => SetPropertyValue(property.Key, e.Value?.ToString())" />
                                }
                            </div>
                        }
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="AddChildComponent">Add</button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}