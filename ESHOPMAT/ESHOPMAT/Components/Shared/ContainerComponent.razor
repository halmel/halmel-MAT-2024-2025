@code {
    [Parameter]
    public PageContent Page { get; set; }

    [Parameter]
    public bool IsEditing { get; set; }

    public string Name { get; set; }
    public Dictionary<string, string> Data { get; set; }

    public int Rows
    {
        get => int.TryParse(Data.GetValueOrDefault(Name + ":rows"), out var value) ? value : 3;
        set => Data[Name + ":rows"] = value.ToString();
    }

    public int Columns
    {
        get => int.TryParse(Data.GetValueOrDefault(Name + ":columns"), out var value) ? value : 3;
        set => Data[Name + ":columns"] = value.ToString();
    }
    public int RowHeight
    {
        get => int.TryParse(Data.GetValueOrDefault(Name + ":rowHeight"), out var value) ? value : 1;
        set => Data[Name + ":rowHeight"] = value.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        Name = Page.Name;
        Data = Page.Data;
    }



    private string GetGridStyle()
    {
        return $"display: grid; grid-template-rows: repeat({Rows}, 1fr); grid-template-columns: repeat({Columns}, 1fr); gap: 5px;";
    }

}

<style>
    .grid-container {
        height:fit-content;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        padding: 10px;
        background-color: #ffffff;
        position: relative;
    }

</style>

<div class="grid-container" style="@GetGridStyle()">
    @foreach (var item in Page.Children)
    {
        <DynamicComponentRendering Page="item" IsEditing=IsEditing IsRoot=false/>
    }
</div>



