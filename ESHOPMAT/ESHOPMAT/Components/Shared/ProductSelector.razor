@inject IDbContextFactory<ProductDbContext> DbProductContextFactory

<select @bind="SelectedProductId">
    <option value="0">No product</option>
    @foreach (var product in Products)
    {
        <option value="@product.Id">@product.Name</option>
    }
</select>

@code {
    [Parameter] public EventCallback<Product> OnProductSelected { get; set; }
    [Parameter] public int DefaultProductId { get; set; } = 0;

    private int _selectedProductId;
    private int SelectedProductId
    {
        get => _selectedProductId;
        set
        {
            if (_selectedProductId != value)
            {
                _selectedProductId = value;
                _ = HandleProductSelection(value);
            }
        }
    }

    private List<Product> Products = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        using (var context = DbProductContextFactory.CreateDbContext())
        {
            Products = await context.Products.ToListAsync();
        }

        if (DefaultProductId != 0 && Products.Any(p => p.Id == DefaultProductId))
        {
            SelectedProductId = DefaultProductId;
            await HandleProductSelection(DefaultProductId);
        }
    }

    private async Task HandleProductSelection(int productId)
    {
        Product selectedProduct = null;
        if (productId != 0)
        {
            using (var context = DbProductContextFactory.CreateDbContext())
            {
                selectedProduct = await context.Products.FirstOrDefaultAsync(p => p.Id == productId);
            }
        }

        if (OnProductSelected.HasDelegate)
        {
            await OnProductSelected.InvokeAsync(selectedProduct);
        }
    }
}
