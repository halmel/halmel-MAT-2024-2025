@using Microsoft.AspNetCore.Components.Forms

<div class="image-container">
    @if (IsEditing)
    {
        <label for="fileUpload" class="upload-label">Drag and drop or click to upload an image</label>
        <InputFile OnChange="OnImageSelected" id="fileUpload" class="file-input" />

        @if (!string.IsNullOrEmpty(ImageBase64))
        {
            <img src="@ImageBase64" alt="Image" class="display-image" />
        }
        else
        {
            <p>No image available</p>
        }
    }
    else
    {
        @if (!string.IsNullOrEmpty(ImageBase64))
        {
            <img src="@ImageBase64" alt="Image" class="display-image" />
        }
        else
        {
            <p>No image available</p>
        }
    }
</div>



@code {
    [Inject]
    private IDbContextFactory<PageDbContext> DbContextFactory { get; set; }

    public string ImageId { get; set; }
    private string ImageBase64 { get; set; }

    private async Task LoadImageFromDatabase()
    {
        try
        {
            // Create a new DbContext instance using the factory
            await using var dbContext = DbContextFactory.CreateDbContext();

            // Fetch the image data from the database
            var image = await dbContext.Images.FindAsync(ConvertToInt(ImageId));
            if (image != null && image.Data != null)
            {
                // Convert the byte array to a Base64 string
                ImageBase64 = $"data:image/jpeg;base64,{Convert.ToBase64String(image.Data)}";
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading image: {ex.Message}");
        }
    }

    private static int ConvertToInt(string imageId)
    {
        if (string.IsNullOrWhiteSpace(imageId))
            throw new ArgumentException("ImageId cannot be null or empty.");

        // Use LINQ to filter numeric characters and parse the result to an integer
        var numericString = new string(imageId.Where(char.IsDigit).ToArray());

        if (string.IsNullOrWhiteSpace(numericString))
            throw new FormatException("ImageId does not contain any numeric characters.");

        return int.Parse(numericString);
    }

    [Parameter]
    public PageContent Page { get; set; }

    [Parameter]
    public bool IsEditing { get; set; }

    public string Name { get; set; }
    public Dictionary<string, string> Data { get; set; }

    private string ImageUrl
    {
        get => Data.GetValueOrDefault($"{Name}:image") ?? string.Empty;
        set => Data[$"{Name}:image"] = value;
    }

    protected override async Task OnInitializedAsync()
    {
        ImageId = Page.Data[Page.Name + ":image"];
        Name = Page.Name;
        Data = Page.Data;

        await LoadImageFromDatabase();
    }

    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                using var stream = file.OpenReadStream();
                var imageData = new byte[file.Size];
                await stream.ReadAsync(imageData);
                var x = await SaveImageToDatabase(file.Name, imageData);
                ImageUrl = x;
                await LoadImageFromDatabase(); // Reload to display the new image
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error uploading image: {ex.Message}");
            }
        }
    }

    private async Task<string> SaveImageToDatabase(string fileName, byte[] imageData)
    {
        try
        {
            // Create a new DbContext instance using the factory
            await using var dbContext = DbContextFactory.CreateDbContext();

            var imageEntry = new PageImage
                {
                    FileName = fileName,
                    Data = imageData
                };

            // Save to database
            dbContext.Images.Add(imageEntry);
            await dbContext.SaveChangesAsync();

            return $"{imageEntry.Id}";
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving image: {ex.Message}");
            return string.Empty;
        }
    }
}

<style>
    .image-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 0; /* Remove any padding that might create gaps */
        border: 1px dashed #ccc;
        border-radius: 8px;
        background-color: #f9f9f9;
        width: 100%; /* Make the container fill its parent */
        height: 100%; /* Make the container fill its parent */
        max-width: 100%; /* Ensure it doesn't exceed the parent width */
        max-height: 100%; /* Ensure it doesn't exceed the parent height */
        overflow: hidden; /* Clip overflowing content */
    }

    .upload-label {
        cursor: pointer;
        color: #007bff;
        margin-bottom: 10px;
    }

    .file-input {
        display: none;
    }

    .display-image {
        width: 100%;
        height: 100%;
        object-fit: cover; /* Ensure the image fills the container while maintaining aspect ratio */
        object-position: center; /* Center the cropped image */
    }
</style>


